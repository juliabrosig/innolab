assertLogical(sex.specific)
library(checkmate)
assertLogical(sex.specific)
### 4
##### 1
checkHeight = function(students.input = students, sex.specific = TRUE,
print.statement = FALSE) {
assertLogical(sex.specific)
# if sex.specific = T
if (sex.specific == TRUE) {
diff = apply(students.input, MARGIN = 1, FUN = function(s){
if (s["sex"] == "M") {
round(as.numeric(s["height"]) -
myOwnMean(students.input$height[students.input$sex == "M"]),
2) * 100
} else {
round(as.numeric(s["height"]) -
myOwnMean(students.input$height[students.input$sex == "F"]),
2) * 100
}
})
students.input$diff = diff
print("Yippie, I calculated the mean differences!")
return(students.input)
# if sex.specific = F
} else {
students.input$diff = round(students.input$height -
myOwnMean(students.input$height), 2) * 100
print("Yippie, I calculated the mean differences!")
return(students.input)
}
}
checkHeight(sex.specific = "hallo")
# (2) Exercise ----
# unit test for checkHeight()
setwd("C:/Users/Cbjf/Desktop")
load("students.rda")
library(innolab)
# (2.1)
# Test that the output contains as many observations as the input.
checkHeight()
no_of_output_obs = nrow(checkHeight())
test1 = function() {
no_of_input_obs = nrow(students)
no_of_output_obs = nrow(checkHeight())
}
nrow(checkHeight(print.statement = FALSE))
nrow(students)
nrow(students) == nrow(checkHeight(print.statement = FALSE))
getwd()
setwd("./innolab")
getwd()
devtools::document()
### (1.5) - ok ----
devtools::install_github("juliafried/innolab")
library(innolab)
nrow(students) == nrow(checkHeight(print.statement = FALSE))
nrow(students) == nrow(checkHeight())
?checkHeight
?checkHeight
load(students)
load("students.rda")
head(students)
students$height = 1
head(students)
checkHeight() == checkHeight(sex.specific = FALSE)
students$height = 2
checkHeight() == checkHeight(sex.specific = FALSE)
equal_observations = function() {
if(nrow(students) == nrow(checkHeight())){
print("ok - input and output observations are equal")
} else {
print("NOT ok - input and output observations are not equal")
}
}
# (2.2)
# Test if both options of sex.specific work equally. Therefore, assign all
# students the same height and check if the results from sex.specific = TRUE
# and sex.specific = FALSE match.
equal_sex_specific = function(){
students$height = 2
if (checkHeight() == checkHeight(sex.specific = FALSE)){
print("ok - sex.specific part works fine")
} else {
print("NOT ok - sex.specific part does not work fine")
}
}
run_tests = function() {
equal_observations()
equal_sex_specific()
}
run_tests()
checkHeight()
checkHeight(sex.specific = FALSE)
checkHeight()$diff
checkHeight(sex.specific = FALSE)$diff
a = checkHeight()$diff
b = checkHeight(sex.specific = FALSE)$diff
# (2.2)
# Test if both options of sex.specific work equally. Therefore, assign all
# students the same height and check if the results from sex.specific = TRUE
# and sex.specific = FALSE match.
equal_sex_specific = function(){
students$height = 2
a = checkHeight()$diff
b = checkHeight(sex.specific = FALSE)$diff
if ( a == b){
print("ok - sex.specific part works fine")
} else {
print("NOT ok - sex.specific part does not work fine")
}
}
run_tests = function() {
equal_observations()
equal_sex_specific()
}
run_tests()
a == b
(isTRUE(a == b))
(!isTRUE(a == b))
c = (!isTRUE(a == b))
if ( c == TRUE){
print("ok - sex.specific part works fine")
} else {
print("NOT ok - sex.specific part does not work fine")
}
# (2.2)
# Test if both options of sex.specific work equally. Therefore, assign all
# students the same height and check if the results from sex.specific = TRUE
# and sex.specific = FALSE match.
equal_sex_specific = function(){
students$height = 2
a = checkHeight()$diff
b = checkHeight(sex.specific = FALSE)$diff
c = (!isTRUE(a == b))
if ( c == TRUE){
print("ok - sex.specific part works fine")
} else {
print("NOT ok - sex.specific part does not work fine")
}
}
run_tests = function() {
equal_observations()
equal_sex_specific()
}
run_tests()
run_tests = function() {
equal_observations()
equal_sex_specific()
}
library(myTestPackage)
context("checkHeight output")
library(testthat)
context("checkHeight output")
students.subset1 = students[1,]
students.subset2 = students[1:5,]
students.subset3 = students[-4,]
test_that("checkHeight outputs correct df dimension", {
expect_data_frame(checkHeight(students.subset1), nrows = nrow(students.subset1))
expect_data_frame(checkHeight(students.subset2), nrows = nrow(students.subset2))
expect_data_frame(checkHeight(students.subset3), nrows = nrow(students.subset3))
})
# (2.1)
students.subset1 = students[1,]
students.subset2 = students[1:5,]
students.subset3 = students[-4,]
test_that("checkHeight outputs correct df dimension", {
expect_data_frame(checkHeight(students.subset1),
nrows = nrow(students.subset1))
expect_data_frame(checkHeight(students.subset2),
nrows = nrow(students.subset2))
expect_data_frame(checkHeight(students.subset3),
nrows = nrow(students.subset3))
})
?expect_data_frame
library(checkmate)
test_that("checkHeight outputs correct df dimension", {
expect_data_frame(checkHeight(students.subset1),
nrows = nrow(students.subset1))
expect_data_frame(checkHeight(students.subset2),
nrows = nrow(students.subset2))
expect_data_frame(checkHeight(students.subset3),
nrows = nrow(students.subset3))
})
expect_data_frame(checkHeight(students.subset1),
nrows = nrow(students.subset1))
students.subset1
expect_data_frame(checkHeight(students.subset2),
nrows = nrow(students.subset2))
expect_data_frame(checkHeight(students.subset3),
nrows = nrow(students.subset3))
# (2.2)
students.same.height = students
students.same.height$height = 1.89
test_that("checkHeight sex.specific arguments has the same output", {
expect_equal(checkHeight(students.same.height, sex.specific = TRUE),
checkHeight(students.same.height, sex.specific = FALSE) )
})
students.no.name = students
students.no.name$name = NULL
students.no.height = students
students.no.height$height = NULL
test_that("throw error if colums are missing in df", {
expect_error(checkHeight(students.no.height), "undefined columns selected")
expect_error(checkHeight(students.no.name), "arguments imply differing number of rows: 0, 8")
})
students.height.as.char = students
no_col_height = students
no_col_height$height = NULL
no_col_height
no_col_name = students
no_col_name$name = NULL
test_that("throw error if there are required columns missing", {
expect_error(checkHeight(no_col_height), "no height column")
expect_error(checkHeight(no_col_name), "no name column")
})
no_col_height$empty_col = 1
no_col_height
no_col_name$empty_col = 1
test_that("throw error if there are required columns missing", {
expect_error(checkHeight(no_col_height), "no height column")
expect_error(checkHeight(no_col_name), "no name column")
})
head(students)
getwd()
# (3.3)
testthat::test_dir("C:/Users/Cbjf/Desktop/innolab/tests")
# (3.3)
testthat::test_dir("C:/Users/Cbjf/Desktop/innolab/tests/testthat")
head(students)
